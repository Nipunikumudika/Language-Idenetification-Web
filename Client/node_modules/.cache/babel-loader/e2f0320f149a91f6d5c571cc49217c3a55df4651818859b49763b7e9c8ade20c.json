{"ast":null,"code":"const express = require('express');\nconst {\n  PythonShell\n} = require('python-shell');\nconst app = express();\nconst port = 5000;\napp.use(express.json());\napp.post('/predict', (req, res) => {\n  const {\n    features\n  } = req.body;\n  const options = {\n    args: [JSON.stringify(features)]\n  };\n  PythonShell.run('./ml.py', options, (err, result) => {\n    if (err) {\n      console.error(err);\n      res.status(500).json({\n        error: 'Internal Server Error'\n      });\n    } else {\n      const prediction = JSON.parse(result[0]);\n      const encodedPrediction = prediction.replace(/[^\\x00-\\x7F]/g, ''); // Remove non-ASCII characters\n      res.json({\n        prediction: encodedPrediction\n      });\n      console.log('Prediction Successful');\n    }\n  });\n});\napp.listen(port, () => {\n  console.log(`Server is running on http://localhost:${port}`);\n});","map":{"version":3,"names":["express","require","PythonShell","app","port","use","json","post","req","res","features","body","options","args","JSON","stringify","run","err","result","console","error","status","prediction","parse","encodedPrediction","replace","log","listen"],"sources":["E:/projects/language_identifier/Client/src/App.js"],"sourcesContent":["const express = require('express');\nconst { PythonShell } = require('python-shell');\nconst app = express();\nconst port = 5000;\n\napp.use(express.json());\n\napp.post('/predict', (req, res) => {\n  const { features } = req.body;\n\n  const options = {\n    args: [JSON.stringify(features)],\n  };\n\n  PythonShell.run('./ml.py', options, (err, result) => {\n    if (err) {\n      console.error(err);\n      res.status(500).json({ error: 'Internal Server Error' });\n    } else {\n      const prediction = JSON.parse(result[0]);\n      const encodedPrediction = prediction.replace(/[^\\x00-\\x7F]/g, ''); // Remove non-ASCII characters\n      res.json({ prediction: encodedPrediction });\n      console.log('Prediction Successful');\n    }\n  });\n});\n\napp.listen(port, () => {\n  console.log(`Server is running on http://localhost:${port}`);\n});\n"],"mappings":"AAAA,MAAMA,OAAO,GAAGC,OAAO,CAAC,SAAS,CAAC;AAClC,MAAM;EAAEC;AAAY,CAAC,GAAGD,OAAO,CAAC,cAAc,CAAC;AAC/C,MAAME,GAAG,GAAGH,OAAO,CAAC,CAAC;AACrB,MAAMI,IAAI,GAAG,IAAI;AAEjBD,GAAG,CAACE,GAAG,CAACL,OAAO,CAACM,IAAI,CAAC,CAAC,CAAC;AAEvBH,GAAG,CAACI,IAAI,CAAC,UAAU,EAAE,CAACC,GAAG,EAAEC,GAAG,KAAK;EACjC,MAAM;IAAEC;EAAS,CAAC,GAAGF,GAAG,CAACG,IAAI;EAE7B,MAAMC,OAAO,GAAG;IACdC,IAAI,EAAE,CAACC,IAAI,CAACC,SAAS,CAACL,QAAQ,CAAC;EACjC,CAAC;EAEDR,WAAW,CAACc,GAAG,CAAC,SAAS,EAAEJ,OAAO,EAAE,CAACK,GAAG,EAAEC,MAAM,KAAK;IACnD,IAAID,GAAG,EAAE;MACPE,OAAO,CAACC,KAAK,CAACH,GAAG,CAAC;MAClBR,GAAG,CAACY,MAAM,CAAC,GAAG,CAAC,CAACf,IAAI,CAAC;QAAEc,KAAK,EAAE;MAAwB,CAAC,CAAC;IAC1D,CAAC,MAAM;MACL,MAAME,UAAU,GAAGR,IAAI,CAACS,KAAK,CAACL,MAAM,CAAC,CAAC,CAAC,CAAC;MACxC,MAAMM,iBAAiB,GAAGF,UAAU,CAACG,OAAO,CAAC,eAAe,EAAE,EAAE,CAAC,CAAC,CAAC;MACnEhB,GAAG,CAACH,IAAI,CAAC;QAAEgB,UAAU,EAAEE;MAAkB,CAAC,CAAC;MAC3CL,OAAO,CAACO,GAAG,CAAC,uBAAuB,CAAC;IACtC;EACF,CAAC,CAAC;AACJ,CAAC,CAAC;AAEFvB,GAAG,CAACwB,MAAM,CAACvB,IAAI,EAAE,MAAM;EACrBe,OAAO,CAACO,GAAG,CAAE,yCAAwCtB,IAAK,EAAC,CAAC;AAC9D,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}